[
  {
    "title": "npm create vue@lattest",
    "imagePath": "../assets/slides/1.jpg",
    "text": "И так начнем наше знакомство с Vue.js3 и продолжим дружбу с такими технологиями как: JavaScript, TypeScript, HTML, CSS, Node.Js и npm. Степы уроков буду проходить подобным образом. На картинке будет изображено, то, что делаю я, а тут справа будет пояснение того, что я делаю. Ну, начнем. Пока просто смотри. Я на данном степе создаю шаблон проекта Vue.js. Разработчики этого фреймфорка позаботились и оставили в репозитории утилиту 'create vue'б которую с помощью данной команды я использую. Если она есть она просто запуститься, а если нет, то скачается и запустится. Здесь я обращаюсь к npm и запускаю утилиту create vue@latest. Команда говорит сама за себя. npm - node.js package manager (напоминаю: пакетный менеджер нашей платформы разработки). create(наверное создать). vue(создаем приложение vue), ну а @latest указывает на то, что будем использовать последнюю версию этой утилиты. Если дочитала, то листай в право!"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/2.jpg",
    "text": "Ну-ка что там. Ого, из-за того, что я использую последнюю версию утилиты create vue. У меня утилиты спрашивает, хочу ли я установить последнюю версию самого фреймворка vue. Ввожу в консоли y - yes и нажимаю enter"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/3.jpg",
    "text": "Указываю имя проекта, просто вводя текст"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/4.jpg",
    "text": "Указал и снова enter"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/5.jpg",
    "text": "Выбрать TypeScript? Ну ясен хуй! Не зря же ебались с ним. (Стрелочками лево/право выбирю и снова enter.)"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/6.jpg",
    "text": "Тут пока что-то для нас не понятное. Не будем его добавлять (Стрелочками выбираем и снова enter)"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/7.jpg",
    "text": "Тут пока тоже не нужное"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/8.jpg",
    "text": "И тут пока тоже не нужное"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/9.jpg",
    "text": "Обойдемся пока без встроеного unit тестирования (если помнишь у нас в прошлых уроках были тесты)"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/10.jpg",
    "text": "И обойдемся без end-to-end тестов"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/11.jpg",
    "text": "Снова NO"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/12.jpg",
    "text": "И снова NO"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/13.jpg",
    "text": "Мы не суеверные но на 13 шагенаше Vue приложение готово к запуску. А утилита нам даже кричит, как это все дело запустить. Проект создавался с именем 'lesson', поэтому для него в нашем репозитории создалась отдельная папка. Утилита говорит, что надо выполнить cd lesson, чтобы перейти в папку проекта. Потом выполнить npm install или npm i, чтобы установились все нужные зависимости. А потом npm run dev, чтобы запустить само приложение. Покорно выполняем"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/14.jpg",
    "text": "В папку перешли. Можно ещё увидеть, как наш текущий путь изменился"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/15.jpg",
    "text": "Калабахаем 'npm i' или 'npm install' эти команды эквивалентны. И видим, что у нас скачались 62 пакета. Все это зависимости для нашего приложения. Нам в подробности вдаваться не придется"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/16.jpg",
    "text": "Теперь ебурим команду npm run dev(Кстати, на нее можно посмотреть в файлике package.json в секции scripts). И нам в консольке напишут, что все готово и приложение запущено по ниже указанному адресу!!!"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/17.jpg",
    "text": "Можно туда даже перейти и посмотреть, шо там есть. Там нас приветствует Vue, благодорит, что мы его выбрали и много всякой другой хуйни. Предлагаю посмотреть на структуру проекта, который у нас создался"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/18.jpg",
    "text": "И так, вот она, наша структура проекта. В дальнейшем она будет тебе очень знакома. Тут куча всякого говна, типа README и всякие gitignor`s, config` и всякие там json`ы. Нам на них пока что класть. Они нужны для всякой настроечной хуйни."
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/19.jpg",
    "text": "Но вот, что реально интересно. Тут есть какой-то index.html. Тут есть какой-то заголовок title, ссылка на css, иконка favicon.ico. Все это находится в head. А в body html Всего лишь один div с айдишником app и какой-то скрипт."
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/20.jpg",
    "text": "Кстати, вот где используются title и иконка: на вкладке браузера"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/21.jpg",
    "text": "Посмотрим далее, в папку src, что является сокращением от source - исходный. Исходный код. Здесь есть две папки: assets - служит длявсяких картинок иконок и тд. Кстати картинки к слайдам я храню именно тут. И components - служит для хранения компонентов. Vue - фреймворк, как и многий пропогадирующий компонентный подход. Это значит, что мы не пишем наше приложение в в одном html, а логику описываем в одном .js или .ts файле. Это значит, что мы опысываем каждый компонент отдельно, а потом уже из этих компонентов собираем страницу, как конструктор. Это большой плюс для менеджмента кода и его переиспользования."
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/22.jpg",
    "text": "Вот содержимое папки assets. Здесь положили base.css. Который описывает, какие цвета и шрифты есть на странице. main.css - отвечает за разметку. А logo.svg - это просто векторное изображение"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/23.jpg",
    "text": "Кстати, вот оно, logo.svg. Зеленая буква V - логотип Vue"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/24.jpg",
    "text": "(сука я удалил картинку этого слайда случайно). Взгялянем в папку components. Тут у нас есть сами компоненты. Они опысываются в файлах с расширением .vue. Здесь есть 3 компонента, которые мы можем увидеть на странице. HelloWorld.vue - это компонент с зеленой V, мотивирующим текстом 'You did it!' и еще какой-то хуйней. WelcomeItem.vue - там описана разметка и поведения маленьких хуйнюшек справа. А TheWelcome.vue - это сам список этих хуйнюшек. (Можно перейти на слайд назад и найти их) Также тут есть папка icons. Инога картинки тоже оформляют в виде компонентов, чтобы переиспользовать где-нибудь в другом месте. Здесь в папке icons описаны иконки каждого элемента из списка"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/25.jpg",
    "text": "Посмотрим на корневой компонент App.vue"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/26.jpg",
    "text": "Посмотрим на корневой компонент App.vue (Эх, нихуя не видно. Там по идее я просто показываю где в этом App.vue находится код, и куда он в итоге рендерится на странице) Благо таких уебищных скринов всего 3. Раз"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/27.jpg",
    "text": "Два"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/28.jpg",
    "text": "Три. Красота. А теперь я нахер удалю эти все компоненты. Оставлю только App.vue. Перезапущу приложение иииии"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/29.jpg",
    "text": "Ииии получу кучу ошибок"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/30.jpg",
    "text": "Тут, конечно, плохо видно, но но тут у нас приложение ругается, потому что удалил компоненты, которые используем в App.vue"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/31.jpg",
    "text": "Мы должны будем удалить их из App.vue"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/32.jpg",
    "text": "Вот мы удалили их из import`ов и в самом шаблоне"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/33.jpg",
    "text": "Теперь приложение не ругается и запускается"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/34.jpg",
    "text": "В корневом компоненте App.vue остались стили. Их тоже удалим из секции style"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/35.jpg",
    "text": "Удалим css`ки из папки assets"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/36.jpg",
    "text": "Также удалим импорт этой css`ки из файла main.ts"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/37.jpg",
    "text": "Теперь изменяя шаблон (секция template) в компоненте App.vue мы можем отображать на странице в браузере все, что угодно"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/38.jpg",
    "text": "Попробуем свой компонент создать сейчас и заюзать его, отрендерить, отобразить его на странице. Создадим в папке components файлик с расширением .vue, а назовем его ну например 'TestComponent1.vue'."
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/39.jpg",
    "text": "Теперь самое главное во Vue.js. То, из чего состоит каждый компонент во Vue. И даже корневой компонент - App.vue. Каждый компонент состоит из 3 секций: script, template и style. Калабахнем здесь такой код. Тег script, в котором бахнем ещё инлайн атрибут setup, чтобы Vue понимал, что эта секция script настроечная, что тут указываются всякие переменные и обработчики событий. Также укажем здесь атрибут lang со значением ts. Ну типа язык тайпскрипт"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/40.jpg",
    "text": "Следующая  секция - это template. Здесь мы пишем верстку нашего компонента"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/41.jpg",
    "text": "Ну style - тут можно описать стили. В инлайн атрибутах можем ругелировать видимость стилей. Тут мы укажем scoped, чтобы стили, описанные здесь, применялись только в рамках этого компонента"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/42.jpg",
    "text": "Давай в секции template добавим какую-то верстку"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/43.jpg",
    "text": "Но ничего не изменится. Потому что надо использовать этот компонент"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/44.jpg",
    "text": "Зайдем в App.vue. И в его секции script импортнем его и используем. Хоба работает"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/45.jpg",
    "text": "Можно даже его зайюзать несколько раз"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/46.jpg",
    "text": "Напишем какой-нибудь код в script нашего тестового компонента. Например console.log. И увидим, что код выполняется. В консоли браузера увидем, что все выводится. В секции скрипт описывается бизнес логика компонента. Это мы запоминаем"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/47.jpg",
    "text": "Изменяя секцию style можем видеть, как стили применяются к компоненту"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/48.jpg",
    "text": "А мы вообще где? В приложеньке которо я сделал, чтобы тебе можно было посмотреть все эти слайды и понять, что всякое такое делать совсем несложно"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/49.jpg",
    "text": "Я создал такой тип. Post у которого есть поля title - заголовок, imagePath - путь к картинке и text - текст))0 Типы"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/50.jpg",
    "text": "Далее я создал такое компонент. Здесь с помощью generic функции определи props - properties - свойства компонента, которые мы можем указать для того, чтобы как-то изменить компонент"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/51.jpg",
    "text": "Здесь в угловых скобках я описываю что объект этиx props содержит поля index, чтобы отображался номер слайда, title, чтобы отображался заголовок ну и так далее"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/52.jpg",
    "text": "Теперь я создам компонент SlideCollection. Здась я импортирую из фреймворка vue некоторые штуки - которые мне нужжны, а именно: ref, onBeforeMount и computed. Дабы сильно не грузиться не будем вдаваться в одробности, что это такое. В секции template компонента SlideCollection я буду применять компонент Slide и отображать его."
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/53.jpg",
    "text": "Здесь видно, как я использую компонент слайда, и с помощью доветочия передаю пропсы в компонент (:index, :title, :imagePath, :text) Так я передаю пропсы в копмонент, подобно тому, как мы это делали ранее в функциях и методах"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/54.jpg",
    "text": "А то, что я передаю в пропсы компонента Slide, я вычисляю в SlideCollection. В onBeforeMount я читаю фалик json, в котором сейчас я пишу этот текст. Можешь на него посмотреть он лежит по пути /lesson/src/data/lesson1.json. Это просто массив объектов, который я могу бахнуть, а именно десериализовать в type Post. Мы его видели ранее. onBeforeMount говорит сам за себя (наПередВстраиванием) Код в этом методе запускается перед тем, как компонент встроится в DOM дерево. В остальном также. Бля я уже утсла писать это, хахахах"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/55.webp",
    "text": "Давай короче ближе к делу, в чем будет заключаться твоя задача"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/56.webp",
    "text": "Твоя задача будет сделать свой компонент. Некоторую карточку, с задачей, множество которых обычно бывает во всяких приложениях по планированию задач. К примеру в популярном сервисе Trello вот так"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/57.jpg",
    "text": "Представь что у тебя есть что-то такое. Карточка, взгялнув на которую можно будет сразу вспомнить про задачу или дело, которое надо сделать. Пусть там будет какой-нибдуь произвольный набор данных, который ты сама придумаешь. Может там будет (дата, сроки, название, детали). А может ты захочешь в минимализм и сделаешь только текст, как на офисном стикере на мониторе"
  },
  {
    "title": "Создаем vue приложение",
    "imagePath": "../assets/slides/58.webp",
    "text": "Где это все сделать? В СВОЕМ VUE ПРОЕКТЕ! Который ты сделаешь сама и сама отчистишь. Это приложение, которое ты запустила, чтобы дойти до этого слайда находится в репозитории в папке lesson, создай свой проект рядышком и назови его practice например. Ну и да, гит чекаут минус б и вся хуйня в отдельной веточке"
  }
]
